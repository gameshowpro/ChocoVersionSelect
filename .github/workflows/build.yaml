on:
  push:
    branches:
      - main
    paths:
      - 'version.json'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  Build_And_Package:
    name: Build and package
    runs-on: windows-latest
    permissions:
      contents: write
    strategy:
      matrix:
        ChannelName:
        - Release

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: true
      BuildConfiguration: Release
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      PROJECT_NAME: ChocoVersionSelect
      PROJECT_PATH: .\src\ChocoVersionSelect.csproj
      ASSETS_PATH: .\build\chocolatey\ChocoVersionSelect
      PACKAGE_ASSEMBLE_PATH: .\package
      BINARIES_PATH: .\package\binaries
      TOOLS_PATH: .\package\tools
      NUSPEC_TARGET_PATH: .\package\ChocoVersionSelect.nuspec
      NUPKG_TARGET_PATH: .\packages

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    - name: Use .NET 8.0.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        dotnet-quality: 'ga'

    - name: Nerdbank.GitVersioning
      uses: dotnet/nbgv@v0.4.1
      with:
        setAllVars: true

    - name: Create Directory for Channel
      shell: pwsh
      run: mkdir ${{ github.workspace }}\${{ matrix.ChannelName }}

    - name: Add Version File to Artifact
      shell: pwsh
      run : |
        New-Item -Path ${{ github.workspace }}\${{ matrix.ChannelName }} -Name 'version.txt' -ItemType 'file' -Value "$env:GitBuildVersionSimple"

    - name: Build release ChocoVersionSelect
      run: |
        dotnet restore $env:PROJECT_PATH
        dotnet publish $env:PROJECT_PATH -c $env:BuildConfiguration --output $env:BINARIES_PATH
      if:  ${{ success() && matrix.ChannelName  == 'Release' }}
    
    - name: Gather chocolatey files
      shell: pwsh
      run: |
        # copy nuspec to target path, replacing tokens
        Copy-Item (Join-Path $env:ASSETS_PATH 'publish.nuspec') -Destination $env:NUSPEC_TARGET_PATH
        
        # copy scripts to tools directory, replacing tokens
        New-Item -Path $env:TOOLS_PATH -ItemType Directory
        Get-ChildItem -Path $env:ASSETS_PATH -File -Filter *.ps1
          | ForEach-Object { `
              (Get-Content $_.FullName) `
                -replace '\$version\$', $env:NBGV_ChocolateyPackageVersion `
                -replace '\$packageId\$', $env:PROJECT_NAME `
                  | Set-Content (Join-Path $env:TOOLS_PATH $_.Name) `
            }
        
        # Append hashes to VERIFICATION.txt before copying to binaries path. Doing it here avoids generating a hash for the text file itself.
        $verificationFilePath = (Join-Path $env:ASSETS_PATH 'VERIFICATION.txt')
        $files = Get-ChildItem -Path $env:BINARIES_PATH -Recurse -File
        Add-Content -Path $verificationFilePath -Value "`nchecksum type: sha256"
        foreach ($file in $files) {
            $checksum = Get-FileHash -Path $file.FullName -Algorithm SHA256 | Select-Object -ExpandProperty Hash
            $relativePath = Resolve-Path -Path $file.FullName -RelativeBasePath $env:BINARIES_PATH -Relative
            Add-Content -Path $verificationFilePath -Value "`nfile: $relativePath`nchecksum: $checksum"
        }

        # copy text files and ignore to binaries path
        Get-ChildItem -Path "$env:ASSETS_PATH\*" -Include "*.ignore", "*.txt" 
          | Copy-Item -Destination $env:BINARIES_PATH
 

        exit 0

    - name: Pack
      id: pack
      shell: pwsh
      run: |
        # Get-ChildItem -Recurse -Path $env:PACKAGE_ASSEMBLE_PATH
        New-Item -Path $env:NUPKG_TARGET_PATH -ItemType Directory
        choco pack $env:NUSPEC_TARGET_PATH --version $env:NBGV_ChocolateyPackageVersion --outputdirectory $env:NUPKG_TARGET_PATH version=$env:NBGV_ChocolateyPackageVersion packageId=$env:PROJECT_NAME
        if ($?)
        {
          $packagePath = (Get-ChildItem -Filter "$env:NUPKG_TARGET_PATH\*.nupkg" | Select-Object -First 1).FullName
          Write-Output "PACKAGE_PATH=$packagePath" >> $env:GITHUB_OUTPUT
          $packagePathForwardSlash = $packagePath -replace '\\','/'
          Write-Output "PACKAGE_PATH_FORWARD_SLASH=$packagePathForwardSlash" >> $env:GITHUB_OUTPUT
          exit 0
        }
        else
        {
          exit 1
        }

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: chocolatey-package
        path: ${{ steps.pack.outputs.PACKAGE_PATH }}

    - name: Add tags
      id: addTags
      shell: pwsh
      run: |
        nbgv tag 
        git push origin "v$env:NBGV_ChocolateyPackageVersion"

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.NBGV_ChocolateyPackageVersion }}
        files: ${{ steps.pack.outputs.PACKAGE_PATH_FORWARD_SLASH }}

    - name: Push to Chocolatey Community
      if: env.NBGV_PrereleaseVersion == ''
      shell: pwsh
      env:
        API_KEY: ${{ secrets.CHOCO_API_KEY }}
      run: |
        choco apiKey -k "$env:API_KEY" -source https://push.chocolatey.org/
        choco push ${{ steps.pack.outputs.PACKAGE_PATH }} --source https://push.chocolatey.org/